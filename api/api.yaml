openapi: "3.0.0"

info:
  version: 1.0.0
  title: 'simple to do api '
  description: 'A simple API for the boilerplate'

schemes:
  - https
  - http
  
paths:
  /todos:
    get:
      summary: Retrieves todos details
      description: provides all the todos that have been created 
      parameters:
        - name: todo
          in: query
          required: true 
          type: string
      responses:
        200:
          description: Array of Todo model instances
          examples:
            application/json:
              {
                "metadata":{
                  "count":12
                },
                "data": [
                {
                  "id": 1,
                  "title" : "to do list",
                  "tags" :[
                    {"id": "125", "name": "Check for table"},
                    {"id": "834", "name": "Look for plants"}
                  ],
                  "description" :  "go test the get",
                  "created_by": "2019-02-05T06:51:36.749Z",
                  "updated_at": "2019-04-05T06:51:36.749Z"
                },
                {
                  "id": 2,
                  "title" : "to do list 2  ",
                  "description" :  "go test the get twice",
                  "tags" :[
                    {"id": "125", "name": "Check for table 1"}
                  ],
                  "created_by": "2019-03-05T06:51:36.749Z",
                  "updated_at": "2019-06-05T06:51:36.749Z"
                        
                }
              ]
            }
            schema:
              $ref: '#/definitions/todosObjecttinDB'
                  
          400:
            description: Error provided todo parameter wrong
            examples:
              application/json:
                {
                  "error": {
                    "message": "todos input is not valid"
                  }
                }
            schema:
              $ref: '#/definitions/errorsObject'
    post:
      summary: Creates todos 
      description: Used to create the todos 
      produces: 
        - application/json
      parameters:
        - name: todos
          description: An object containing all the required details
          in: body
          schema:
            $ref: '#/definitions/todosObject'
      responses:
        201:
          description: todos created
          examples:
            application/json:
              {
                "data": {
                      "id": 3,
                      "title" : "added new todos",
                      "note" :  "go test the post",
                      "due_date" :  "2019-02-05T06:51:36.749Z",
                      "created_by": "2019-02-05T06:51:36.749Z",
                      "updated_at": "2019-04-05T06:51:36.749Z"
                  }
              }
          
          schema:
            $ref: '#/definitions/todosObjectinDB'
        400:
          description: Error the provided todoid is not found
          examples:
            application/json:
              {
                "error": {
                  "message": "todos with id is invalid"
                }
              }
          schema:
            $ref: '#/definitions/errorObject'
  /todos/{todo_id}:
    get:
      summary: retrieves the todos by id
      parameters:
        - name: todo_id
          in: path
          type: string 
          required: true
        - name: todos
      description: an object containing the field that need to be acquired
      responses:
        200:
          description: Todo model instance
          examples:
            application/json:
              {
                 "data": {
                   "id": 3,
                   "title" : "added new todos",
                   "note" :  "go test the post",
                   "tags" :[
                      {"id": "125", "name": "Check for table"},
                      {"id": "834", "name": "Look for plants"}
                    ],
                   "due_date" :  "2019-02-05T06:51:36.749Z",
                   "created_by": "2019-02-05T06:51:36.749Z",
                   "updated_at": "2019-04-05T06:51:36.749Z"
                 }
              }
          schema:
            $ref: '#/definitions/todosObjecttinDB'
                
        400:
          description: Error the input provided is not valid 
          examples:
            application/json:
              {
                "error": {
                  "message": "todos with id is invalid"
                }
              }  
          schema:
            $ref: '#/definitions/errorObject'
        404:
          description: Error the provided todoid is not found.
          examples:
            application/json:
              {
                "error": {
                  "message": "todos with id <todos:id> was not found."
                }
              }
          schema:
              $ref: '#/definitions/errorObject'
              
  todos/health:
      'get':
        summary: checks that the api is working 
        description: asserts that the api is working as exp
        responses:
          '200':
            description: the health check is passed
            examples:
              application/json:
               {
                  "status": "Service available",
                  "timestamp": "2018-01-17T03:36:48Z",
                  "database": "connection ok"    
               }
                    
          '503':
            description: 'health check failed '
            examples:
              application/json:
                {
                  "status": "Service Unavailable",
                  "errors": {
                    "database": "connection refused"
                    },
                  }
                  
definitions:
  todosObjectinDB:
    type: object
    properties:
      data:
          required:
             - todo_id 
             - title
             - note 
             - due_date
             - created_at 
             - updated_at
          properties:
            id:
              type: string 
              description: MongoDb uniqueID identifying the todos
            title: 
              type: string
              description: description of the todos
            note:
              type: string
              description: to do note 
            due_date:
              type: string
              description: Time when this todos is due
            created_at:
              type: string
              description: Time when this todos was created
            updated_at:
              type: string
              description: Last time this todos was updated
    
  todosObject:
    type: object
    properties:
      data:
        properties:
            id:
              type: string 
              description: MongoDb uniqueID identifying the todos
            title: 
              type: string 
              description: contains the description of the todos
            note: 
              type: string 
              description: contains the description of the todos

  errorObject:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
host: localhost
basePath: /api/v1